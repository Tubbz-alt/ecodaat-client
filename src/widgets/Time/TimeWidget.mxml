<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:esri="http://www.esri.com/2008/ags"
                   xmlns:viewer="com.esri.viewer.*"
                   layout="absolute"
                   widgetConfigLoaded="init()">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.TimeExtent;
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
            import com.esri.ags.layers.Layer;
            import com.esri.ags.layers.supportClasses.TimeInfo;

            [Bindable]
            private var sliderLoop:Boolean = false;
			[Bindable]
			private var publicSite:String = "false";
            [Bindable]
            private var sliderSingleThumbAsTimeInstant:Boolean = false;
            [Bindable]
            private var sliderThumbCount:int = 1;
            [Bindable]
            private var sliderThumbMovingRate:int = 2000;

            private var timeStopsInterval:Number
            private var timeStopsUnits:String;
            private var timeStopsCount:Number;

            protected function init():void
            {
                if (configXML)
                {
                    var dateFormat:String = configXML.dateformat;
                    if (dateFormat)
                    {
                        myDateFormatter.formatString = dateFormat;
                    }
                    sliderLoop = configXML.loop == "true";
                    sliderSingleThumbAsTimeInstant = configXML.singlethumbastimeinstant == "true";
                    if (!isNaN(parseInt(configXML.thumbcount)))
                    {
                        sliderThumbCount = parseInt(configXML.thumbcount);
                    }
                    if (!isNaN(parseInt(configXML.thumbmovingrate)))
                    {
                        sliderThumbMovingRate = parseInt(configXML.thumbmovingrate);
                    }
                    timeStopsInterval = parseFloat(configXML..timestopsinterval);
                    var timeStopsUnitsConfig:String = configXML..timestopsunits || "";
                    if (timeStopsUnitsConfig)
                    {
                        switch (timeStopsUnitsConfig.toLowerCase())
                        {
                            case "years":
                            {
                                timeStopsUnits = TimeInfo.UNIT_YEARS;
                                break;
                            }
                            case "months":
                            {
                                timeStopsUnits = TimeInfo.UNIT_MONTHS;
                                break;
                            }
                            case "days":
                            {
                                timeStopsUnits = TimeInfo.UNIT_DAYS;
                                break;
                            }
                            case "hours":
                            {
                                timeStopsUnits = TimeInfo.UNIT_HOURS;
                                break;
                            }
                            case "minutes":
                            {
                                timeStopsUnits = TimeInfo.UNIT_MINUTES;
                                break;
                            }
                            case "seconds":
                            {
                                timeStopsUnits = TimeInfo.UNIT_SECONDS;
                                break;
                            }
                        }
                    }
                    timeStopsCount = parseInt(configXML..timestopscount);
                    var timeExtentFromLayer:String = configXML.timeextent.@setfromlayer[0];
					publicSite = configXML.timeextent.@publicSite[0];
                    if (timeExtentFromLayer != "")
                    {
                        var layer:Layer = map.getLayer(timeExtentFromLayer);
                        if (layer)
                        {
                            if (layer.loaded)
                            {
                                createTimeStopsFromLayer(layer);
                            }
                            else
                            {
                                layer.addEventListener(LayerEvent.LOAD, layerLoadHandler);
                                function layerLoadHandler(event:LayerEvent):void
                                {
                                    createTimeStopsFromLayer(layer);
                                }
                            }
                        }
                    }
                    else
                    {
                        var startTime:Number = Date.parse(configXML.timeextent.starttime);
                        var endTime:Number = Date.parse(configXML.timeextent.endtime);
                        if (!isNaN(startTime) && !isNaN(endTime))
                        {
                            var timeExtent:TimeExtent = new TimeExtent();
                            timeExtent.startTime = new Date(startTime);
                            timeExtent.endTime = new Date(endTime);
                            createTimeStops(timeExtent);
                        }
                    }
                }
            }

            protected function widgetClosedHandler(event:Event):void
            {
                timeSlider.pause();
                map.timeSlider = null;
                map.timeExtent = null;
            }

            protected function widgetOpenedHandler(event:Event):void
            {
                map.timeSlider = timeSlider;
            }

            protected function createTimeStopsFromLayer(layer:Layer):void
            {
                var timeInfo:TimeInfo;
                if (layer is ArcGISDynamicMapServiceLayer)
                {
                    timeInfo = (layer as ArcGISDynamicMapServiceLayer).timeInfo;
                }
                if (timeInfo)
                {
                    if ((isNaN(timeStopsInterval) || !timeStopsUnits) && isNaN(timeStopsCount))
                    {
                        timeStopsInterval = timeInfo.timeInterval;
                        timeStopsUnits = timeInfo.timeIntervalUnits;
                    }
					if(publicSite == "true"){
						//subtract 10 years
						timeInfo.timeExtent.endTime.fullYear = timeInfo.timeExtent.endTime.fullYear - 10;
						createTimeStops(timeInfo.timeExtent);
						timeSlider.thumbIndexes = [310,370];
					}
					else{
						//sometimes the map services doesn't accurately represent what the end time is (new data)
						timeInfo.timeExtent.endTime.fullYear = timeInfo.timeExtent.endTime.fullYear = new Date().fullYear;
						createTimeStops(timeInfo.timeExtent);
					}
                }
				map.timeSlider = timeSlider;
            }

            protected function createTimeStops(timeExtent:TimeExtent):void
            {
                if (timeExtent)
                {
                    if (!isNaN(timeStopsInterval) && timeStopsUnits)
                    {
                        timeSlider.createTimeStopsByTimeInterval(timeExtent, timeStopsInterval, timeStopsUnits);
                    }
                    else
                    {
                        if (isNaN(timeStopsCount))
                        {
                            timeStopsCount = 10;
                        }
                        timeSlider.createTimeStopsByCount(timeExtent, timeStopsCount);
                    }
                }
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <mx:DateFormatter id="myDateFormatter" formatString="MMMM, YYYY"/>
    </fx:Declarations>
	
	<esri:TimeSlider id="timeSlider" useHandCursor="true" buttonMode="true"
					 width="100%" chromeColor="0xCCCCCC"
					 loop="{sliderLoop}" thumbIndexes="[0,500]"
					 singleThumbAsTimeInstant="{sliderSingleThumbAsTimeInstant}"
					 thumbCount="{sliderThumbCount}"
					 thumbMovingRate="{sliderThumbMovingRate}"/>
	<mx:HBox width="210" x="41" height="28" id="hintBox" alpha=".9" useHandCursor="true" horizontalAlign="center" backgroundColor="0xFFFFFF" cornerRadius="14">
		<s:Label paddingLeft="0" color="0x666666" useHandCursor="true" text="TimeSlider is used for Data Visualization only." paddingTop="5" fontSize="11" width="160" id="labeling" fontWeight="bold"/>
		<mx:HBox useHandCursor="true" color="0x666666"  click="{hintBox.visible = false}" paddingTop="4" toolTip="Close Window to change TimeSlider" paddingRight="1">
			<!--<s:Label paddingLeft="4" color="0x666666" text="X" paddingTop="5" fontSize="13" fontWeight="bold"/>-->
			<s:Image buttonMode="true" useHandCursor="true" source="assets/images/w_close.png" click="{hintBox.visible = false}"/>
		</mx:HBox>
	</mx:HBox>
    <!--<viewer:WidgetTemplate id="wTemplate"
                           width="335" height="115"
                           closed="widgetClosedHandler(event)"
                           minHeight="115"
                           minWidth="335"
                           open="widgetOpenedHandler(event)">
        <viewer:layout>
            <s:VerticalLayout gap="10"
                              horizontalAlign="center"
                              paddingTop="4"/>
        </viewer:layout>
        <s:Label fontSize="14"
                 horizontalCenter="true"
                 text="{myDateFormatter.format(timeSlider.timeExtent.endTime)}"/>
        
    </viewer:WidgetTemplate>-->
</viewer:BaseWidget>
